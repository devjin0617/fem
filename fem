#!/bin/bash

# FEM (Frontend Macro) - Git Merge Helper
# Version: 1.0.0

# 버전 정보
VERSION="1.0.0"

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# 스크립트 디렉토리
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# 배너 출력
show_banner() {
    echo -e "${CYAN}"
    echo "╔═══════════════════════════════════════╗"
    echo "║                                       ║"
    echo "║   ${MAGENTA}FEM${CYAN} - Frontend Macro            ║"
    echo "║   Git Merge Helper v1.0.0            ║"
    echo "║                                       ║"
    echo "╚═══════════════════════════════════════╝"
    echo -e "${NC}"
}

# 현재 브랜치 확인
check_current_branch() {
    CURRENT_BRANCH=$(git branch --show-current 2>/dev/null)
    
    if [ -z "$CURRENT_BRANCH" ]; then
        echo -e "${RED}❌ Git 저장소가 아니거나 브랜치를 찾을 수 없습니다.${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}📍 현재 브랜치: ${GREEN}$CURRENT_BRANCH${NC}"
    echo ""
}

# 메뉴 출력
show_menu() {
    echo -e "${YELLOW}원하는 작업을 선택하세요:${NC}"
    echo ""
    echo -e "  ${GREEN}1${NC}) server/dev에 머지"
    echo -e "  ${GREEN}2${NC}) server/staging에 머지"
    echo -e "  ${GREEN}3${NC}) 두 서버 모두에 순차적으로 머지"
    echo -e "  ${GREEN}4${NC}) 종료"
    echo ""
}

# server/dev 머지 함수
merge_to_dev() {
    echo -e "${BLUE}=========================================${NC}"
    echo -e "${CYAN}📦 server/dev에 머지 시작...${NC}"
    echo -e "${BLUE}=========================================${NC}"
    echo ""
    
    CURRENT_BRANCH=$(git branch --show-current)
    
    echo "현재 브랜치: $CURRENT_BRANCH"
    echo "server/dev 브랜치로 이동 중..."
    
    git checkout server/dev
    if [ $? -ne 0 ]; then
        echo -e "${RED}❌ server/dev 브랜치로 체크아웃 실패${NC}"
        return 1
    fi
    
    echo "server/dev 브랜치 pull 중..."
    git pull origin server/dev
    
    echo "$CURRENT_BRANCH 브랜치를 server/dev에 머지 중..."
    git merge $CURRENT_BRANCH
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}❌ 머지 실패. 충돌을 해결해주세요.${NC}"
        return 1
    fi
    
    echo -e "${GREEN}✅ 머지 성공!${NC}"
    
    echo "$CURRENT_BRANCH 브랜치로 복귀 중..."
    git checkout $CURRENT_BRANCH
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}❌ $CURRENT_BRANCH 브랜치로 체크아웃 실패${NC}"
        return 1
    fi
    
    echo -e "${GREEN}✅ 작업 완료! $CURRENT_BRANCH 브랜치로 돌아왔습니다.${NC}"
    echo ""
    return 0
}

# server/staging 머지 함수
merge_to_staging() {
    echo -e "${BLUE}=========================================${NC}"
    echo -e "${CYAN}📦 server/staging에 머지 시작...${NC}"
    echo -e "${BLUE}=========================================${NC}"
    echo ""
    
    CURRENT_BRANCH=$(git branch --show-current)
    
    echo "현재 브랜치: $CURRENT_BRANCH"
    echo "server/staging 브랜치로 이동 중..."
    
    git checkout server/staging
    if [ $? -ne 0 ]; then
        echo -e "${RED}❌ server/staging 브랜치로 체크아웃 실패${NC}"
        return 1
    fi
    
    echo "server/staging 브랜치 pull 중..."
    git pull origin server/staging
    
    echo "$CURRENT_BRANCH 브랜치를 server/staging에 머지 중..."
    git merge $CURRENT_BRANCH
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}❌ 머지 실패. 충돌을 해결해주세요.${NC}"
        return 1
    fi
    
    echo -e "${GREEN}✅ 머지 성공!${NC}"
    
    echo "$CURRENT_BRANCH 브랜치로 복귀 중..."
    git checkout $CURRENT_BRANCH
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}❌ $CURRENT_BRANCH 브랜치로 체크아웃 실패${NC}"
        return 1
    fi
    
    echo -e "${GREEN}✅ 작업 완료! $CURRENT_BRANCH 브랜치로 돌아왔습니다.${NC}"
    echo ""
    return 0
}

# 두 서버 모두 머지
merge_to_all() {
    CURRENT_BRANCH=$(git branch --show-current)
    
    echo -e "${BLUE}=========================================${NC}"
    echo -e "${CYAN}📦 모든 서버에 순차적으로 머지 시작...${NC}"
    echo -e "${BLUE}=========================================${NC}"
    echo ""
    
    echo -e "${MAGENTA}📌 1단계: server/dev에 머지${NC}"
    merge_to_dev
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}❌ server/dev 머지 실패. 작업을 중단합니다.${NC}"
        return 1
    fi
    
    echo -e "${MAGENTA}📌 2단계: server/staging에 머지${NC}"
    merge_to_staging
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}❌ server/staging 머지 실패.${NC}"
        return 1
    fi
    
    echo -e "${BLUE}=========================================${NC}"
    echo -e "${GREEN}✅ 모든 작업 완료!${NC}"
    echo -e "   ${CYAN}• server/dev: 머지 완료${NC}"
    echo -e "   ${CYAN}• server/staging: 머지 완료${NC}"
    echo -e "   ${CYAN}• 현재 브랜치: $CURRENT_BRANCH${NC}"
    echo -e "${BLUE}=========================================${NC}"
    echo ""
    return 0
}

# 버전 출력
show_version() {
    echo "FEM (Frontend Macro) v$VERSION"
    exit 0
}

# 도움말 출력
show_help() {
    echo "FEM (Frontend Macro) - Git Merge Helper"
    echo ""
    echo "사용법: fem [옵션]"
    echo ""
    echo "옵션:"
    echo "  -v, --version    버전 정보 출력"
    echo "  -h, --help       도움말 출력"
    echo ""
    echo "인자 없이 실행하면 대화형 메뉴가 나타납니다."
    exit 0
}

# 메인 로직
main() {
    # 옵션 처리
    case "${1:-}" in
        -v|--version)
            show_version
            ;;
        -h|--help)
            show_help
            ;;
        "")
            # 인자 없이 실행 - 정상 동작
            ;;
        *)
            echo -e "${RED}❌ 알 수 없는 옵션: $1${NC}"
            echo ""
            show_help
            ;;
    esac
    
    show_banner
    check_current_branch
    
    while true; do
        show_menu
        read -p "선택 (1-4): " choice
        echo ""
        
        case $choice in
            1)
                merge_to_dev
                ;;
            2)
                merge_to_staging
                ;;
            3)
                merge_to_all
                ;;
            4)
                echo -e "${CYAN}👋 종료합니다.${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}❌ 잘못된 선택입니다. 1-4 중에서 선택해주세요.${NC}"
                echo ""
                ;;
        esac
        
        # 다음 작업을 위해 잠시 대기
        read -p "엔터를 눌러 계속하세요..."
        echo ""
        echo ""
    done
}

# 스크립트 실행
main "$@"

